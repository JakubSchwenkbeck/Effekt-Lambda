module src/lib/beta

import src/lib/ast
import src/lib/vars
import src/lib/alpha


// Perform one step of β-reduction on an expression.
// When encountering an application of the form (λx. body) arg,
// reduce it to substitute(body, x, arg).
// If no reduction is possible, the expression is returned unchanged.
def reduce(expr: Expr): Expr = expr match {
  // β-reduction: (λx. body) arg  ==>  substitute(body, x, arg)
  case App(Abs(param, body), arg) =>
    substitute(body, param, arg)
  // Recursively try to reduce the function part first.
  case App(func, arg) =>
    val newFunc = reduce(func) 
    if (newFunc.equals(func)) {
      App(func, reduce(arg))
    } else {
      App(newFunc, arg)
    }
  // Reduce inside abstractions.
  case Abs(param, body) =>
    Abs(param, reduce(body))
  // Variables cannot be reduced.
  case _ => expr
}

// Evaluate an expression to normal form by repeatedly applying beta reduction.
def eval(expr: Expr): Expr = {
  val reduced = reduce(expr)
  if (reduced.equals(expr)) {
    expr
  } else {
    eval(reduced)
   }
}