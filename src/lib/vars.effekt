module src/lib/vars

import set
import src/lib/ast

// Generate a fresh variable name given a base name and a set of used names.
def freshVar(name: String, used: Set[String]): String = {
  var newName : String = name
  var counter : Int = 0
  while (used.contains(newName)) {
    counter = counter + 1
    // Convert the counter to a character (assuming ASCII digits)
    val stringCounter : Char = (counter + 48).toChar()
    newName = name ++ stringCounter.toString
  }
  newName
}

// Collect free variables in an expression.
// In an abstraction, the bound variable is removed from the free set.
def freeVars(expr: Expr): Set[String] = expr match {
  case Var(name) => singletonGeneric[String](name)
  case Abs(param, body) => difference(freeVars(body), singletonGeneric(param))
  case App(func, arg) => union(freeVars(func), freeVars(arg))
}
