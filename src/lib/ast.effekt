module src/lib/ast

import effekt
import option
import set
import bytearray


// Lambda Calculus Abstract Syntax Tree (AST)
type Expr {
  Var(name: String);
  Abs(param: String, body: Expr);
  App(func: Expr, arg: Expr)
}

// Convert an expression into its string representation.
def lambdaToString(self: Expr): String = self match {
  case Var(name)        => name
  case Abs(param, body) => "(Î»" ++ param ++ ". " ++ lambdaToString(body) ++ ")"
  case App(func, arg)   => "(" ++ lambdaToString(func) ++ " " ++ lambdaToString(arg) ++ ")"
}