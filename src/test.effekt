module src/test

import test
import set
import src/lib/ast
import src/lib/vars
import src/lib/alpha
import src/lib/beta
import src/lib/callByValue
import src/lib/normalOrder
import src/lib/church
def main() = mainSuite("lib") {
 test("Identity Function") {
    val id = Abs("x", Var("x"))
    val result = lambdaToString(id)
    assertEqual(result, "(λx. x)")
  }

  test("Abstraction") {
    val abs = Abs("x", Abs("y", Var("x")))
    val result = lambdaToString(abs)
    assertEqual(result, "(λx. (λy. x))")
  }

  test("Application") {
    val app = App(Abs("x", Var("x")), Var("y"))
    val result = lambdaToString(app)
    assertEqual(result, "((λx. x) y)")
  }

  test("Pretty Print longer lambda calculus") {
  val id = Abs("x", Var("x"));
  val constant = Abs("x", Abs("y", Var("x")));
  val apply = Abs("f", Abs("x", App(Var("f"), Var("x"))));
  
  val result = (lambdaToString(App(App(apply, id), constant))) // (((λf. (λx. (f x))) (λx. x)) (λx. (λy. x)))

    assertEqual(result, "(((λf. (λx. (f x))) (λx. x)) (λx. (λy. x)))")
  }


  test("Alpha Conversion") {
  val expr = Abs("x", App(Var("x"), Var("y")))
  // Define a set of used names that includes "x" (and optionally "y")
  // so that the bound variable "x" must be renamed.
  val usedNames = union(singletonGeneric("x"), singletonGeneric("y"))
  
  // Perform alpha conversion to avoid variable capture.
  val converted = alphaConvert(expr, usedNames)
  val result = lambdaToString(converted)
  
  // The bound variable "x" should be renamed to "x1"
  // resulting in "(λx1. (x1 y))".
  assertEqual(result, "(λx1. (x1 y))")
}
test("β-reduction: Identity function") {
  val id = Abs("x", Var("x"))
  val expr = App(id, Var("y"))
  val reduced = reduce(expr)
  val result = lambdaToString(reduced)
  println("β-reduction (identity): " ++ result)
  // Expected: "y"
  assertEqual(result, "y")
}

// Test for β-reduction of a constant function:
// (λx. (λy. x)) a  should reduce to  (λy. a)
test("β-reduction: Constant function") {
  val const = Abs("x", Abs("y", Var("x")))
  val expr = App(const, Var("a"))
  val reduced = reduce(expr)
  val result = lambdaToString(reduced)
  println("β-reduction (constant): " ++ result)
  // Expected: "(λy. a)"
  assertEqual(result, "(λy. a)")
}
test("β-reduction: Reduce argument when function is irreducible") {
  // Expression: f ((λx. x) y)
  // Expected reduction: f y
  val expr = App(Var("f"), App(Abs("x", Var("x")), Var("y")))
  val reduced = reduce(expr)
  val result = lambdaToString(reduced)
  println("β-reduction (argument reduction): " ++ result)
  // The identity redex (λx. x) y reduces to y,
  // so the whole expression reduces to (f y)
  assertEqual(result, "(f y)")
}
test("β-reduction: Nested abstraction application") {
  // Expression: (λx. (λy. x y)) z
  val expr = App(Abs("x", Abs("y", App(Var("x"), Var("y")))), Var("z"))

  // Perform reduction
  val reduced = reduce(expr)

  // Convert result to string
  val result = lambdaToString(reduced)
  println("Nested abstraction reduction: " ++ result)

  // Expected output: λy. (z y)
  assertEqual(result, "(λy. (z y))")
}
  test("Call-by-Value Evaluation") {
    val expr = App(Abs("x", Var("x")), Var("y"))
    val result = callByValueEval(expr)
    assertEqual(lambdaToString(result), "y")
  }

  test("Normal-Order Evaluation") {
    val expr = App(Abs("x", Var("x")), Var("y"))
    val result = normalOrderEval(expr)
    assertEqual(lambdaToString(result), "y")
  }
  test("Church Numerals") {
    assertEqual(lambdaToString(zero), "(λf. (λx. x))")
    assertEqual(lambdaToString(one), "(λf. (λx. (f x)))")
    assertEqual(lambdaToString(two), "(λf. (λx. (f (f x))))")
    assertEqual(lambdaToString(three), "(λf. (λx. (f (f (f x)))))")

    assertEqual(churchToString(zero), "0")
    assertEqual(churchToString(one), "1")
    assertEqual(churchToString(two), "11")
    assertEqual(churchToString(three), "111")
  }
}
